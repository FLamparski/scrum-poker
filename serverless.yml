service: hackday2020-scrum-poker

frameworkVersion: '2'

plugins:
#  - serverless-s3-sync
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-plugin-common-excludes
  # - serverless-plugin-include-dependencies

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt DynamoDBVotesTable.Arn
        - !Join ['/', [!GetAtt DynamoDBVotesTable.Arn, 'index', '*' ] ]
        - !GetAtt DynamoDBRoomPlayersTable.Arn
        - !Join ['/', [!GetAtt DynamoDBRoomPlayersTable.Arn, 'index', '*' ] ]
        - !GetAtt DynamoDBRoomsTable.Arn
        - !Join ['/', [!GetAtt DynamoDBRoomsTable.Arn, 'index', '*' ] ]
  logs:
    websocket: true

custom:
  secrets: ${file(.settings/secrets.json)}
  dynamoDbVotesTable: ${self:service}-${self:provider.stage}-tb_votes
  dynamoDbRoomsTable: ${self:service}-${self:provider.stage}-tb_rooms
  dynamoDbRoomPlayersTable: ${self:service}-${self:provider.stage}-tb_room_players
  buckets:
    STATIC_BUCKET_NAME: ${self:service}-${self:provider.stage}-static
  # s3Sync:
  #   - bucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}
  #     localDir: dist
  customDomain:
    domainName: ${self:custom.secrets.domainName.${self:provider.stage}}
    basePath: ''
    endpointType: regional
    certificateName: '*.scrumpoker.lol'
    stage: ${self:provider.stage}
    createRoute53Record: true
  apigwBinary:
    types:
      - '*/*'

package:
  excludeDevDependencies: true
  include:
    - dist/handler.js
    - .nuxt/**
  exclude:
    - .git/**
    - .settings/**
    - node_modules/@types/**

functions:
  onmessage:
    handler: ./dist/handler.websocketMessageHandler
    environment:
      DYNAMODB_VOTES_TABLE: ${self:custom.dynamoDbVotesTable}
      DYNAMODB_ROOMS_TABLE: ${self:custom.dynamoDbRoomsTable}
      DYNAMODB_ROOM_PLAYERS_TABLE: ${self:custom.dynamoDbRoomPlayersTable}
    events:
      - websocket:
          route: $default
  disconnect:
    handler: ./dist/handler.websocketDisconnectedHandler
    environment:
      DYNAMODB_VOTES_TABLE: ${self:custom.dynamoDbVotesTable}
      DYNAMODB_ROOMS_TABLE: ${self:custom.dynamoDbRoomsTable}
      DYNAMODB_ROOM_PLAYERS_TABLE: ${self:custom.dynamoDbRoomPlayersTable}
    events:
      - websocket:
          route: $disconnect

  nuxt:
    handler: ./dist/handler.nuxtHandler
    events:
      - http: ANY /
      - http: ANY /{proxy+}

resources:
  Resources:
    DynamoDBVotesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: room
            KeyType: HASH
          - AttributeName: user
            KeyType: RANGE
        TableName: ${self:custom.dynamoDbVotesTable}
    DynamoDBRoomsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room
            AttributeType: S
        KeySchema:
          - AttributeName: room
            KeyType: HASH
        TableName: ${self:custom.dynamoDbRoomsTable}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    DynamoDBRoomPlayersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: room
            KeyType: HASH
          - AttributeName: connectionId
            KeyType: RANGE
        TableName: ${self:custom.dynamoDbRoomPlayersTable}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    ClientStaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}
        # WebsiteConfiguration:
        #   IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    ClientStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientStaticBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement: [
            {
              Action: ['s3:GetObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientStaticBucket' }, '/*']],
              },
              Principal: '*'
            },
          ]
